/*****************************************************************************
 * Copyright (c) 2014-2020 OpenRCT2 developers
 *
 * For a complete list of all authors, please refer to contributors.md
 * Interested in contributing? Visit https://github.com/OpenRCT2/OpenRCT2
 *
 * OpenRCT2 is licensed under the GNU General Public License version 3.
 *****************************************************************************/

#include "TestData.h"

#include <gtest/gtest.h>
#include <openrct2/drawing/Drawing.h>

//                       flags     data                  width    height   length, valid
using TCase = std::tuple<uint16_t, std::vector<uint8_t>, int16_t, int16_t, size_t, bool>;

class SpriteLoadingTest : public testing::TestWithParam<TCase>
{
};

INSTANTIATE_TEST_CASE_P(
    TrimData, SpriteLoadingTest,
    testing::Values(
        TCase(
            G1_FLAG_RLE_COMPRESSION,
            {
                0xf6, 0xf6, 0xf6, 0xf5, 0xf5, 0xf4, 0xf5, 0xf3, 0x83, 0x14, 0xf6, 0xf6, 0xf5, 0x0c, 0x00, 0xf8, 0xf7, 0xf6,
                0xf6, 0xf6, 0xf6, 0xf6, 0xf5, 0xf5, 0xf4, 0xf5, 0xf4, 0x84, 0x14, 0xf5, 0xf7, 0xcf, 0xd0, 0x0c, 0x00, 0xf7,
                0xf6, 0xf6, 0xf6, 0xf6, 0xf5, 0xf5, 0xf4, 0xf5, 0xf6, 0xf6, 0xf5, 0x85, 0x13, 0xcd, 0xcf, 0xd0, 0xd0, 0xd0,
                0x07, 0x00, 0xf6, 0xf6, 0xf6, 0xf5, 0xf5, 0xf4, 0xf4, 0x03, 0x09, 0xf6, 0xf6, 0xf6, 0x87, 0x11, 0xcd, 0xd0,
                0xd0, 0xd0, 0xd0, 0xd0, 0xcc, 0x05, 0x00, 0xf6, 0xf6, 0xf5, 0xf5, 0xf4, 0x04, 0x09, 0xf3, 0xf6, 0xf6, 0xf4,
                0x86, 0x10, 0xcd, 0xd0, 0xd0, 0xd0, 0xd0, 0xcc, 0x05, 0x00, 0xf5, 0xf5, 0xf4, 0xf5, 0xf4, 0x03, 0x0a, 0xf6,
                0xf6, 0xf6, 0x85, 0x0e, 0xcd, 0xd0, 0xd0, 0xd0, 0xcf, 0x03, 0x00, 0xf4, 0xf5, 0xf3, 0x88, 0x0a, 0xf3, 0xf6,
                0xcf, 0xd0, 0xd0, 0xd0, 0xd0, 0xcd, 0x02, 0x00, 0xf6, 0xf5, 0x86, 0x0a, 0xcd, 0xd0, 0xd0, 0xd0, 0xd0, 0xcd,
                0x02, 0x00, 0xf6, 0xf6, 0x86, 0x08, 0xcd, 0xd0, 0xd0, 0xd0, 0xd0, 0xcd, 0x03, 0x00,
            },
            0, 79, 0, false),
        TCase(
            G1_FLAG_RLE_COMPRESSION,
            {
                0xf6, 0xf6, 0xf6, 0xf5, 0xf5, 0xf4, 0xf5, 0xf3, 0x83, 0x14, 0xf6, 0xf6, 0xf5, 0x0c, 0x00, 0xf8, 0xf7, 0xf6,
                0xf6, 0xf6, 0xf6, 0xf6, 0xf5, 0xf5, 0xf4, 0xf5, 0xf4, 0x84, 0x14, 0xf5, 0xf7, 0xcf, 0xd0, 0x0c, 0x00, 0xf7,
                0xf6, 0xf6, 0xf6, 0xf6, 0xf5, 0xf5, 0xf4, 0xf5, 0xf6, 0xf6, 0xf5, 0x85, 0x13, 0xcd, 0xcf, 0xd0, 0xd0, 0xd0,
                0x07, 0x00, 0xf6, 0xf6, 0xf6, 0xf5, 0xf5, 0xf4, 0xf4, 0x03, 0x09, 0xf6, 0xf6, 0xf6, 0x87, 0x11, 0xcd, 0xd0,
                0xd0, 0xd0, 0xd0, 0xd0, 0xcc, 0x05, 0x00, 0xf6, 0xf6, 0xf5, 0xf5, 0xf4, 0x04, 0x09, 0xf3, 0xf6, 0xf6, 0xf4,
                0x86, 0x10, 0xcd, 0xd0, 0xd0, 0xd0, 0xd0, 0xcc, 0x05, 0x00, 0xf5, 0xf5, 0xf4, 0xf5, 0xf4, 0x03, 0x0a, 0xf6,
                0xf6, 0xf6, 0x85, 0x0e, 0xcd, 0xd0, 0xd0, 0xd0, 0xcf, 0x03, 0x00, 0xf4, 0xf5, 0xf3, 0x88, 0x0a, 0xf3, 0xf6,
                0xcf, 0xd0, 0xd0, 0xd0, 0xd0, 0xcd, 0x02, 0x00, 0xf6, 0xf5, 0x86, 0x0a, 0xcd, 0xd0, 0xd0, 0xd0, 0xd0, 0xcd,
                0x02, 0x00, 0xf6, 0xf6, 0x86, 0x08, 0xcd, 0xd0, 0xd0, 0xd0, 0xd0, 0xcd, 0x03, 0x00,
            },
            0, 79, 0, false),
        TCase(
            G1_FLAG_RLE_COMPRESSION,
            {
                0xf7, 0x87, 0x13, 0xf4, 0xf5, 0xcd, 0xd0, 0xd2, 0xd1, 0xd1, 0x05, 0x00, 0xcb, 0xd0, 0xd0, 0xcf, 0xcb, 0x0e,
                0x06, 0xf4, 0xf6, 0xf6, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xfb, 0xfa, 0xf9, 0xf7, 0x85, 0x15, 0xcf,
                0xd0, 0xd2, 0xd1, 0xd1, 0x9a, 0x00, 0xcb, 0xd0, 0xd0, 0xd0, 0xcb, 0xf4, 0xf6, 0xf6, 0xf6, 0xf8, 0xf8, 0xf8,
                0xf8, 0xf8, 0xf8, 0xf8, 0xfb, 0xf7, 0xf9, 0xfa, 0xf7, 0xce, 0xd0, 0xd2, 0xd1, 0xd1, 0x9a, 0x00, 0xcb, 0xd0,
                0xd0, 0xcf, 0xf5, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf9, 0xf7, 0xf6, 0xf8,
                0xfb, 0xf7, 0xd0, 0xd2, 0xd1, 0xd1, 0x9a, 0x00, 0xcb, 0xd0, 0xd0, 0xcd, 0xf6, 0xf5, 0xf6, 0xf5, 0xf6, 0xf6,
                0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf7, 0xf6, 0xd0, 0xd2, 0xd1, 0xd1, 0x07, 0x00,
            },
            0, 63, 0, false),
        TCase(
            G1_FLAG_RLE_COMPRESSION,
            {
                0x05, 0x14, 0xce, 0xce, 0xd1, 0xd5, 0xd3, 0x02, 0x1c, 0xf5, 0xf8, 0x85, 0x25, 0xce, 0xce, 0xd0, 0xd4, 0xcf,
                0x06, 0x15, 0xce, 0xce, 0xcf, 0xd4, 0xd2, 0xd0, 0x03, 0x1c, 0xf5, 0xf6, 0xf6, 0x85, 0x26, 0xce, 0xce, 0xcf,
                0xd4, 0xcf, 0x06, 0x16, 0xcd, 0xce, 0xce, 0xd2, 0xd4, 0xd0, 0x02, 0x1d, 0xf6, 0xf9, 0x85, 0x27, 0xce, 0xce,
                0xd0, 0xd4, 0xcf, 0x08, 0x17, 0xcc, 0xce, 0xce, 0xd2, 0xd4, 0xd0, 0xf6, 0xf7, 0x85, 0x28, 0xcd, 0xce, 0xd0,
                0xd4, 0xcf, 0x07, 0x19, 0xce, 0xce, 0xd2, 0xd4, 0xd0, 0xf6, 0xf4, 0x84, 0x29, 0xcc, 0xce, 0xcf, 0xd4, 0x06,
                0x1a, 0xce, 0xce, 0xd0, 0xd4, 0xd0, 0xf8, 0x82, 0x2a, 0xcc, 0xcd, 0x85, 0x1b, 0xce, 0xce, 0xd0, 0xd4, 0xd4,
                0x85, 0x1c, 0xce, 0xce, 0xd0, 0xd4, 0xd0, 0x85, 0x1d, 0xce, 0xce, 0xd0, 0xd4, 0xd0, 0x84, 0x1e, 0xce, 0xce,
                0xd0, 0xd3, 0x83, 0x1f, 0xce, 0xce, 0xcd, 0x81, 0x20, 0xcd, 0x36, 0x00,
            },
            0, 69, 0, false),
        TCase(
            G1_FLAG_RLE_COMPRESSION,
            {
                0x05, 0x14, 0xce, 0xce, 0xd1, 0xd5, 0xd3, 0x02, 0x1c, 0xf5, 0xf8, 0x85, 0x25, 0xce, 0xce, 0xd0, 0xd4, 0xcf,
                0x06, 0x15, 0xce, 0xce, 0xcf, 0xd4, 0xd2, 0xd0, 0x03, 0x1c, 0xf5, 0xf6, 0xf6, 0x85, 0x26, 0xce, 0xce, 0xcf,
                0xd4, 0xcf, 0x06, 0x16, 0xcd, 0xce, 0xce, 0xd2, 0xd4, 0xd0, 0x02, 0x1d, 0xf6, 0xf9, 0x85, 0x27, 0xce, 0xce,
                0xd0, 0xd4, 0xcf, 0x08, 0x17, 0xcc, 0xce, 0xce, 0xd2, 0xd4, 0xd0, 0xf6, 0xf7, 0x85, 0x28, 0xcd, 0xce, 0xd0,
                0xd4, 0xcf, 0x07, 0x19, 0xce, 0xce, 0xd2, 0xd4, 0xd0, 0xf6, 0xf4, 0x84, 0x29, 0xcc, 0xce, 0xcf, 0xd4, 0x06,
                0x1a, 0xce, 0xce, 0xd0, 0xd4, 0xd0, 0xf8, 0x82, 0x2a, 0xcc, 0xcd, 0x85, 0x1b, 0xce, 0xce, 0xd0, 0xd4, 0xd4,
                0x85, 0x1c, 0xce, 0xce, 0xd0, 0xd4, 0xd0, 0x85, 0x1d, 0xce, 0xce, 0xd0, 0xd4, 0xd0, 0x84, 0x1e, 0xce, 0xce,
                0xd0, 0xd3, 0x83, 0x1f, 0xce, 0xce, 0xcd, 0x81, 0x20, 0xcd, 0x36, 0x00,
            },
            0, 69, 0, false),
        TCase(
            G1_FLAG_RLE_COMPRESSION,
            {
                0x0d, 0x0c, 0x0c, 0x0e, 0x13, 0x11, 0x8c, 0x15, 0x0c, 0x0c, 0x0c, 0x0c, 0x0e, 0xf7, 0x0e, 0x0d, 0xce, 0xd0,
                0xcf, 0xcd, 0xa1, 0x01, 0xce, 0xce, 0xce, 0xce, 0xce, 0xd0, 0xce, 0xcf, 0xcf, 0xcd, 0xcd, 0xcf, 0xcf, 0xcf,
                0xcf, 0x0d, 0x0e, 0x12, 0x13, 0xf6, 0xf6, 0xf6, 0xf6, 0x0d, 0xf8, 0xf9, 0xf5, 0x0d, 0xcd, 0xcd, 0xcf, 0xd0,
                0xcd, 0xa2, 0x01, 0xcd, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xd0,
                0xd0, 0x0d, 0xfb, 0xf8, 0x0d, 0x0e, 0xf8, 0xf8, 0x0e, 0x0e, 0xf6, 0x0c, 0x0b, 0xf6, 0xf9, 0x10, 0x0e, 0xd0,
                0xcf, 0x16, 0x04, 0xf4, 0xf6, 0xf5, 0xcd, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xcf, 0xcf, 0xd0,
                0xcd, 0x0c, 0x0c, 0x0c, 0x0e, 0x12, 0x0f, 0x89, 0x1b, 0x0c, 0x0c, 0x0c, 0x0e, 0x13, 0x0f, 0xce, 0xd0, 0xcd,
                0x9a, 0x0a, 0xcc, 0xcd, 0xcc, 0xcc, 0xcd, 0xcd, 0xce, 0xce, 0xd0, 0xd0, 0xcd, 0x0c, 0x0c, 0x0e, 0x13, 0x0e,
                0x0c, 0x0c, 0x0c, 0x0d, 0x0e, 0xf8, 0xf6, 0xf6, 0xd0, 0xcf, 0x1c, 0x00, 0x32, 0x00,
            },
            0, 79, 0, false),
        TCase(
            G1_FLAG_RLE_COMPRESSION,
            {
                0x0d, 0x0c, 0x0c, 0x0e, 0x13, 0x11, 0x8c, 0x15, 0x0c, 0x0c, 0x0c, 0x0c, 0x0e, 0xf7, 0x0e, 0x0d, 0xce, 0xd0,
                0xcf, 0xcd, 0xa1, 0x01, 0xce, 0xce, 0xce, 0xce, 0xce, 0xd0, 0xce, 0xcf, 0xcf, 0xcd, 0xcd, 0xcf, 0xcf, 0xcf,
                0xcf, 0x0d, 0x0e, 0x12, 0x13, 0xf6, 0xf6, 0xf6, 0xf6, 0x0d, 0xf8, 0xf9, 0xf5, 0x0d, 0xcd, 0xcd, 0xcf, 0xd0,
                0xcd, 0xa2, 0x01, 0xcd, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xd0,
                0xd0, 0x0d, 0xfb, 0xf8, 0x0d, 0x0e, 0xf8, 0xf8, 0x0e, 0x0e, 0xf6, 0x0c, 0x0b, 0xf6, 0xf9, 0x10, 0x0e, 0xd0,
                0xcf, 0x16, 0x04, 0xf4, 0xf6, 0xf5, 0xcd, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xce, 0xcf, 0xcf, 0xd0,
                0xcd, 0x0c, 0x0c, 0x0c, 0x0e, 0x12, 0x0f, 0x89, 0x1b, 0x0c, 0x0c, 0x0c, 0x0e, 0x13, 0x0f, 0xce, 0xd0, 0xcd,
                0x9a, 0x0a, 0xcc, 0xcd, 0xcc, 0xcc, 0xcd, 0xcd, 0xce, 0xce, 0xd0, 0xd0, 0xcd, 0x0c, 0x0c, 0x0e, 0x13, 0x0e,
                0x0c, 0x0c, 0x0c, 0x0d, 0x0e, 0xf8, 0xf6, 0xf6, 0xd0, 0xcf, 0x1c, 0x00, 0x32, 0x00,
            },
            0, 79, 0, false),
        TCase(
            G1_FLAG_RLE_COMPRESSION,
            {
                0x6c, 0xda, 0x6f, 0x6d, 0x84, 0x0e, 0x6c, 0xda, 0x6d, 0x6e, 0x82, 0x0f, 0xd8, 0xd8, 0x1e,
                0x00, 0x23, 0x00, 0x2b, 0x00, 0x36, 0x00, 0x44, 0x00, 0x55, 0x00, 0x69, 0x00, 0x80, 0x00,
                0x9a, 0x00, 0xb3, 0x00, 0xcb, 0x00, 0xe2, 0x00, 0xf8, 0x00, 0x0d, 0x01, 0x21, 0x01, 0x83,
                0x0e, 0xd8, 0x6b, 0xd9, 0x86, 0x0d, 0xd8, 0xd9, 0x6d, 0x6d, 0x6c, 0x6b, 0x89,
            },
            32, 8, 58, false),
        TCase(
            G1_FLAG_RLE_COMPRESSION,
            {
                0x16, 0x00, 0x19, 0x00, 0x1b, 0x00, 0x1d, 0x00, 0x1f, 0x00, 0x21, 0x00, 0x23, 0x00, 0x26, 0x00, 0x2a, 0x00,
                0x2d, 0x00, 0x30, 0x00, 0x81, 0x00, 0x75, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x81,
                0x11, 0x6e, 0x82, 0x11, 0x6f, 0x6f, 0x81, 0x12, 0x6c, 0x81, 0x12, 0x6a, 0x83, 0x13, 0xca, 0xca, 0xca,
            },
            22, 11, 53, true),
        TCase(
            G1_FLAG_RLE_COMPRESSION,
            {
                0x12, 0x00, 0x16, 0x00, 0x1d, 0x00, 0x26, 0x00, 0x2f, 0x00, 0x33, 0x00, 0x37, 0x00, 0x3b, 0x00, 0x40,
                0x00, 0x82, 0x04, 0x6a, 0x6a, 0x85, 0x03, 0x6a, 0x6a, 0x6b, 0x70, 0x0a, 0x02, 0x00, 0x6a, 0x6a, 0x83,
                0x05, 0x71, 0x72, 0x6d, 0x02, 0x00, 0x6a, 0x6c, 0x83, 0x05, 0x6f, 0x71, 0x70, 0x82, 0x06, 0x6d, 0x6f,
                0x82, 0x06, 0xf7, 0xfb, 0x82, 0x06, 0xf6, 0xfb, 0x83, 0x06, 0x0a, 0xf9, 0xfb, 0x81, 0x08, 0xf5,
            },
            9, 9, 67, true)));

TEST_P(SpriteLoadingTest, CheckRLESize)
{
    auto testCase = GetParam();
    rct_g1_element g1{};
    g1.flags = std::get<0>(testCase);
    g1.offset = std::get<1>(testCase).data();
    g1.width = std::get<2>(testCase);
    g1.height = std::get<3>(testCase);
    size_t expected_size = std::get<4>(testCase);
    bool expected_valid = std::get<5>(testCase);
    PaletteMap pm{};
    rct_drawpixelinfo dpi{};
    dpi.width = g1.width;
    DrawSpriteArgs dsa(
        &dpi, ImageId{}, pm, g1, /*srcX*/ 0,
        /*srcY*/ 0, /*width*/ g1.width, g1.height, nullptr);
    size_t length = g1_calculate_data_size(&g1);
    ASSERT_EQ(expected_size, length);
    bool ok = check_gfx_rle_sprite_to_buffer(dsa, length);
    EXPECT_EQ(ok, expected_valid);
}
